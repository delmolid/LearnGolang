# NOTES D'APPRENTISSAGE GO

## 1. PACKAGE FMT - FORMATAGE ET AFFICHAGE

### Import
import "fmt"

### Fonctions principales d'affichage
- fmt.Print()    : Affiche sans saut de ligne
- fmt.Println()  : Affiche avec saut de ligne automatique + espaces entre arguments
- fmt.Printf()   : Affichage avec formatage personnalisé

### Verbes de formatage courants
%s - string (chaîne de caractères)
%d - int (entier décimal)
%f - float (nombre décimal)
%t - bool (booléen true/false)
%v - any (valeur par défaut)
%T - any (type de la variable)

### Autres fonctions utiles
- fmt.Sprintf() : Formatage sans affichage (retourne une string)
- fmt.Scan()    : Lecture d'entrée utilisateur

### Exemples
fmt.Println("Hello World")                    // Hello World
fmt.Printf("Je m'appelle %s\n", "Alice")     // Je m'appelle Alice
fmt.Printf("Age: %d ans\n", 25)              // Age: 25 ans

## 2. VARIABLES EN GO

### Déclaration avec var
var a = "initial"           // Type inféré
var b, c int = 1, 2        // Déclaration multiple avec type explicite
var d = true               // Booléen
var e int                  // Valeur zéro (0 pour int)

### Déclaration courte avec :=
f := "apple"               // Équivalent à var f = "apple"

### Valeurs zéro par défaut
- int: 0
- string: ""
- bool: false
- float: 0.0

## 2.1 CONSTANTES EN GO

### Déclaration de constantes
const s string = "constant"     // Constante typée
const n = 500000000            // Constante non typée (plus flexible)
const pi = 3.14159             // Constante numérique

### Constantes typées vs non typées
- Constante typée : const typedConst int = 42
- Constante non typée : const untypedConst = 42 (plus flexible)

### Caractéristiques des constantes
- IMMUTABLES : Ne peuvent jamais être modifiées
- ÉVALUÉES À LA COMPILATION : Valeurs calculées avant l'exécution
- EXPRESSIONS CONSTANTES : Peuvent être des calculs avec des valeurs constantes
- CONVERSION AUTOMATIQUE : Les constantes non typées s'adaptent au contexte

### Types de constantes possibles
- Booléens : const isActive = true
- Chaînes : const message = "Hello"
- Numériques : const pi = 3.14159
- Caractères : const letter = 'A'

### Avantages des constantes non typées
- Flexibilité avec différents types numériques
- Précision arbitraire dans les calculs
- Conversion automatique selon le contexte

### Exemples d'utilisation
const d = 3e20 / n                    // Calcul à la compilation
fmt.Println(int64(d))                 // Conversion vers int64
fmt.Println(math.Sin(n))              // Conversion automatique vers float64

### Notation scientifique
3e20 = 3 × 10²⁰ = 300000000000000000000

## 3. TYPES DE DONNÉES DE BASE

### Strings
- Concaténation avec +
- Exemple: "go" + "lang" = "golang"

### Entiers et flottants
- Opérations arithmétiques: +, -, *, /
- Exemple: 1+1 = 2, 7.0/3.0 = 2.333...

### Booléens
- Opérateurs logiques:
  - && (ET logique)
  - || (OU logique)
  - !  (NON logique)
- Exemple: true && false = false

## 3.1 TABLEAUX (ARRAYS) EN GO

### Caractéristiques des tableaux
- TAILLE FIXE : Définie à la compilation
- TYPE HOMOGÈNE : Tous les éléments du même type
- INDEXATION : Commence à 0
- VALEURS PAR DÉFAUT : Zéro pour le type (0 pour int, "" pour string)

### 3.1.1 Déclaration de tableaux

### Déclaration avec taille explicite
var arr [5]int                        // Tableau de 5 entiers, initialisé à [0 0 0 0 0]

### Déclaration avec initialisation
arr := [5]int{1, 2, 3, 4, 5}         // Tableau avec valeurs initiales

### Taille automatique
arr := [...]int{1, 2, 3, 4, 5}       // Go calcule automatiquement la taille (5)

### 3.1.2 Opérations sur les tableaux

### Accès aux éléments
element := arr[2]                     // Récupère l'élément à l'index 2
arr[4] = 100                         // Modifie l'élément à l'index 4

### Longueur du tableau
length := len(arr)                    // Retourne la taille du tableau

### Parcours avec range (index et valeur)
for i, value := range arr {
    fmt.Printf("Index: %d, Valeur: %d\n", i, value)
}

### Parcours avec range (index seulement)
for i := range arr {
    fmt.Printf("Index: %d, Valeur: %d\n", i, arr[i])
}

### 3.1.3 Tableaux multidimensionnels

### Déclaration tableau 2D
var matrix [2][3]int                  // 2 lignes, 3 colonnes

### Initialisation avec boucles
for i := range 2 {
    for j := range 3 {
        matrix[i][j] = i + j          // Remplit avec la somme des indices
    }
}
// Résultat: [[0 1 2] [1 2 3]]

### Initialisation directe
matrix := [2][3]int{
    {1, 2, 3},                        // Première ligne
    {4, 5, 6},                        // Deuxième ligne
}

### Accès aux éléments 2D
element := matrix[1][2]               // Élément ligne 1, colonne 2
matrix[0][1] = 10                     // Modification d'un élément

### 3.1.4 Exemples pratiques

### Tableau simple
var scores [5]int
scores[0] = 95
scores[1] = 87
fmt.Println("Scores:", scores)        // [95 87 0 0 0]
fmt.Println("Longueur:", len(scores)) // 5

### Tableau avec valeurs
names := [3]string{"Alice", "Bob", "Charlie"}
for i, name := range names {
    fmt.Printf("Personne %d: %s\n", i+1, name)
}

### Matrice 2D pratique
var grid [3][3]int
// Remplir la diagonale
for i := range 3 {
    grid[i][i] = 1
}
fmt.Println("Matrice identité:", grid) // [[1 0 0] [0 1 0] [0 0 1]]

## 3.2 SLICES EN GO

### Différences Slices vs Arrays
- TAILLE DYNAMIQUE vs Fixe
- Plus flexibles et couramment utilisées
- Built-in sur un array sous-jacent

### 3.2.1 États d'une slice

### Slice nil (non initialisée)
var s []string                        // Slice nil
fmt.Println(s == nil)                 // true
fmt.Println(len(s))                   // 0
fmt.Println(cap(s))                   // 0

### Slice vide (mais pas nil)
s := make([]string, 0)                // Slice vide initialisée
fmt.Println(s == nil)                 // false
fmt.Println(len(s))                   // 0

### Slice avec éléments
s := []string{"a", "b", "c"}          // Slice littérale
fmt.Println(len(s))                   // 3

### 3.2.2 Création de slices

### Avec make() - longueur et capacité
s := make([]int, 5, 10)               // len=5, cap=10, éléments=[0 0 0 0 0]
s := make([]int, 5)                   // len=5, cap=5

### Slice littérale
s := []string{"hello", "world"}       // Création directe avec valeurs

### À partir d'un array
arr := [5]int{1, 2, 3, 4, 5}
s := arr[1:4]                         // Slice de l'array: [2 3 4]

### 3.2.3 Opérations sur les slices

### Accès et modification
s[0] = "nouveau"                      // Modification d'un élément
element := s[2]                       // Accès à un élément

### Ajout d'éléments avec append()
s = append(s, "nouvel élément")       // Ajoute un élément
s = append(s, "elem1", "elem2")       // Ajoute plusieurs éléments
s = append(s, autreSlice...)          // Ajoute tous les éléments d'une autre slice

### Longueur et capacité
fmt.Println("Longueur:", len(s))      // Nombre d'éléments actuels
fmt.Println("Capacité:", cap(s))      // Capacité maximale sans réallocation

### 3.2.4 Slicing (sous-slices)

### Syntaxes de slicing
s := []string{"a", "b", "c", "d", "e"}
sub1 := s[1:4]                        // [b c d] - index 1 à 3
sub2 := s[:3]                         // [a b c] - début à index 2
sub3 := s[2:]                         // [c d e] - index 2 à la fin
sub4 := s[:]                          // [a b c d e] - copie complète

### 3.2.5 Copie de slices

### Copie avec copy()
original := []int{1, 2, 3, 4, 5}
copie := make([]int, len(original))
copy(copie, original)                 // Copie tous les éléments

### Copie partielle
copy(copie[1:], original[2:4])        // Copie partielle

### 3.2.6 Comparaison de slices

### Avec le package slices (Go 1.21+)
import "slices"

s1 := []string{"a", "b", "c"}
s2 := []string{"a", "b", "c"}
if slices.Equal(s1, s2) {             // Comparaison du contenu
    fmt.Println("Slices identiques")
}

### 3.2.7 Slices 2D (slice de slices)

### Création d'une matrice irrégulière
twoD := make([][]int, 3)              // 3 lignes
for i := range 3 {
    innerLen := i + 1                 // Longueur variable par ligne
    twoD[i] = make([]int, innerLen)   // Ligne de longueur variable
    for j := range innerLen {
        twoD[i][j] = i + j
    }
}
// Résultat: [[0] [1 2] [2 3 4]]

### Matrice régulière
matrix := make([][]int, 3)            // 3 lignes
for i := range matrix {
    matrix[i] = make([]int, 4)        // 4 colonnes par ligne
}

### 3.2.8 Gestion de la capacité

### Pré-allocation pour optimiser les performances
s := make([]int, 0, 100)              // len=0, cap=100
for i := 0; i < 50; i++ {
    s = append(s, i)                  // Pas de réallocation
}

### Croissance automatique de la capacité
var s []int                           // cap=0
s = append(s, 1)                      // cap devient 1
s = append(s, 2)                      // cap devient 2  
s = append(s, 3)                      // cap devient 4
s = append(s, 4)                      // cap reste 4
s = append(s, 5)                      // cap devient 8 (doublée)

### Vérifier l'espace libre
espaceLibre := cap(s) - len(s)

### 3.2.9 Parcours de slices

### Avec range (index et valeur)
for i, value := range s {
    fmt.Printf("Index: %d, Valeur: %v\n", i, value)
}

### Avec range (index seulement)
for i := range s {
    fmt.Printf("Index: %d\n", i)
}

### Avec range (valeur seulement)
for _, value := range s {
    fmt.Printf("Valeur: %v\n", value)
}

### 3.2.10 Exemples pratiques de slices

### Filtrage d'éléments
numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
var evens []int
for _, num := range numbers {
    if num%2 == 0 {
        evens = append(evens, num)    // [2 4 6 8 10]
    }
}

### Suppression d'un élément (à l'index i)
s := []string{"a", "b", "c", "d", "e"}
i := 2  // Supprimer "c"
s = append(s[:i], s[i+1:]...)         // [a b d e]

### Insertion d'un élément
s := []string{"a", "b", "d", "e"}
i := 2  // Insérer "c" à l'index 2
s = append(s[:i], append([]string{"c"}, s[i:]...)...)  // [a b c d e]

## 3.3 MAPS (CARTES/DICTIONNAIRES) EN GO

### Qu'est-ce qu'une map ?
- STRUCTURE CLÉ-VALEUR : Associe des clés uniques à des valeurs
- NON ORDONNÉE : L'ordre des éléments n'est pas garanti
- TYPE DE RÉFÉRENCE : Comme les slices et channels
- ÉQUIVALENT : Dictionnaire, HashMap, Table de hachage

### 3.3.1 Création de maps

### Avec make()
m := make(map[string]int)             // Map vide clé=string, valeur=int
m := make(map[string]int, 10)         // Avec capacité initiale (optimisation)

### Map littérale
m := map[string]int{
    "alice": 25,
    "bob":   30,
    "charlie": 35,
}

### Map vide avec type
var m map[string]int                  // Map nil (doit être initialisée avant usage)
m = make(map[string]int)              // Initialisation nécessaire

### 3.3.2 Opérations de base

### Ajout et modification
m["clé"] = valeur                     // Ajoute ou modifie
m["alice"] = 26                       // Modifie la valeur existante
m["diana"] = 28                       // Ajoute une nouvelle entrée

### Accès aux valeurs
valeur := m["alice"]                  // Récupère la valeur (26)
valeur := m["inexistante"]            // Retourne valeur zéro du type (0 pour int)

### Accès avec vérification d'existence
valeur, existe := m["alice"]
if existe {
    fmt.Printf("Alice a %d ans\n", valeur)
} else {
    fmt.Println("Alice non trouvée")
}

### Longueur de la map
taille := len(m)                      // Nombre de paires clé-valeur

### 3.3.3 Suppression et nettoyage

### Suppression d'un élément
delete(m, "bob")                      // Supprime la paire clé-valeur
delete(m, "inexistante")              // Pas d'erreur si la clé n'existe pas

### Vider complètement une map (Go 1.21+)
clear(m)                              // Supprime tous les éléments
fmt.Println(len(m))                   // 0

### 3.3.4 Parcours de maps

### Parcours clé-valeur
for clé, valeur := range m {
    fmt.Printf("%s: %d\n", clé, valeur)
}

### Parcours clés seulement
for clé := range m {
    fmt.Printf("Clé: %s\n", clé)
}

### Parcours valeurs seulement
for _, valeur := range m {
    fmt.Printf("Valeur: %d\n", valeur)
}

### Note sur l'ordre
// L'ordre de parcours est ALÉATOIRE et peut changer entre les exécutions

### 3.3.5 Comparaison de maps

### Avec le package maps (Go 1.21+)
import "maps"

m1 := map[string]int{"foo": 1, "bar": 2}
m2 := map[string]int{"foo": 1, "bar": 2}
if maps.Equal(m1, m2) {              // Compare le contenu
    fmt.Println("Maps identiques")
}

### Comparaison manuelle (versions antérieures)
func mapsEqual(m1, m2 map[string]int) bool {
    if len(m1) != len(m2) {
        return false
    }
    for k, v1 := range m1 {
        if v2, ok := m2[k]; !ok || v1 != v2 {
            return false
        }
    }
    return true
}

### 3.3.6 Types de maps courantes

### Map string vers int (compteurs)
compteurs := map[string]int{
    "pommes":  5,
    "oranges": 3,
}

### Map string vers bool (ensembles)
ensemble := map[string]bool{
    "alice": true,
    "bob":   true,
}

### Map int vers string (index vers nom)
noms := map[int]string{
    1: "premier",
    2: "deuxième",
    3: "troisième",
}

### Map string vers slice (groupement)
groupes := map[string][]string{
    "fruits":   {"pomme", "orange", "banane"},
    "légumes":  {"carotte", "brocoli"},
}

### 3.3.7 Exemples pratiques

### Comptage d'occurrences
text := "hello world hello"
compteur := make(map[string]int)
mots := strings.Fields(text)
for _, mot := range mots {
    compteur[mot]++                   // Incrémente le compteur
}
// Résultat: map[hello:2 world:1]

### Vérification d'appartenance (ensemble)
autorisés := map[string]bool{
    "admin": true,
    "user":  true,
}
if autorisés["admin"] {
    fmt.Println("Accès autorisé")
}

### Cache/mémoisation
cache := make(map[int]int)
func fibonacci(n int) int {
    if n <= 1 {
        return n
    }
    if val, ok := cache[n]; ok {
        return val                    // Valeur en cache
    }
    result := fibonacci(n-1) + fibonacci(n-2)
    cache[n] = result                 // Mise en cache
    return result
}

### Regroupement de données
personnes := []struct{nom string; age int}{
    {"Alice", 25}, {"Bob", 30}, {"Charlie", 25},
}
parAge := make(map[int][]string)
for _, p := range personnes {
    parAge[p.age] = append(parAge[p.age], p.nom)
}
// Résultat: map[25:[Alice Charlie] 30:[Bob]]

### 3.3.8 Maps imbriquées

### Map de maps
utilisateurs := map[string]map[string]interface{}{
    "alice": {
        "age":    25,
        "email":  "alice@example.com",
        "active": true,
    },
    "bob": {
        "age":    30,
        "email":  "bob@example.com", 
        "active": false,
    },
}

### Accès aux données imbriquées
if user, ok := utilisateurs["alice"]; ok {
    if age, ok := user["age"].(int); ok {
        fmt.Printf("Alice a %d ans\n", age)
    }
}

### 3.3.9 Gestion d'erreurs avec maps

### Vérification avant accès
func getUser(id string, users map[string]User) (User, error) {
    user, exists := users[id]
    if !exists {
        return User{}, fmt.Errorf("utilisateur %s non trouvé", id)
    }
    return user, nil
}

### Pattern d'initialisation sûre
func safeMapAccess(m map[string]int, key string) int {
    if m == nil {
        return 0
    }
    return m[key]  // Retourne 0 si la clé n'existe pas
}

## 4. CONDITIONS ET STRUCTURES DE CONTRÔLE

### 4.1 Structure if/else if/else
if condition1 {
    // code si condition1 est vraie
} else if condition2 {
    // code si condition2 est vraie
} else {
    // code si aucune condition n'est vraie
}

### 4.2 Opérateurs de comparaison
- == : égal à
- != : différent de
- <  : inférieur à
- <= : inférieur ou égal à
- >  : supérieur à
- >= : supérieur ou égal à

### 4.3 Opérateurs logiques
- && : ET logique (AND)
- || : OU logique (OR)
- !  : NON logique (NOT)

### 4.4 if avec déclaration courte
if variable := valeur; condition {
    // variable est accessible ici seulement
}
// variable n'est plus accessible ici

### Exemple pratique
if num := 9; num < 0 {
    fmt.Println(num, "is negative")
} else if num < 10 {
    fmt.Println(num, "has 1 digit")
} else {
    fmt.Println(num, "has multiple digits")
}
// Sortie: 9 has 1 digit

### 4.5 Tests de parité et divisibilité
// Test de parité
if 7%2 == 0 {
    fmt.Println("7 is even")
} else {
    fmt.Println("7 is odd")  // Cette branche s'exécute
}

// Test de divisibilité
if 8%4 == 0 {
    fmt.Println("8 is divisible by 4")  // Cette condition est vraie
}

// Condition avec OR
if 8%2 == 0 || 7%2 == 0 {
    fmt.Println("either 8 or 7 are even")  // true || false = true
}

### Avantages de la déclaration courte dans if
- Portée limitée : la variable n'existe que dans le bloc if/else
- Code plus propre : évite la pollution de l'espace de noms
- Lisibilité : la logique est contenue dans le bloc

### 4.6 SWITCH - Alternative élégante à if/else

### Types de switch en Go
1. Switch classique : switch variable { case valeur: }
2. Switch conditionnel : switch { case condition: }
3. Type switch : switch variable.(type) { case type: }

### 4.6.1 Switch basique
i := 2
switch i {
case 1:
    fmt.Println("One")
case 2:
    fmt.Println("Two")    // Cette branche s'exécute
case 3:
    fmt.Println("Three")
}

### 4.6.2 Switch avec cases multiples
switch time.Now().Weekday() {
case time.Saturday, time.Sunday:
    fmt.Println("It's the weekend")
default:
    fmt.Println("It's weekday")
}

### 4.6.3 Switch sans expression (conditionnel)
t := time.Now()
switch {
case t.Hour() < 12:
    fmt.Println("It's before noon")
default:
    fmt.Println("It's after noon")
}
// Équivalent à switch true

### 4.6.4 Type Switch
whatAmI := func(i interface{}) {
    switch t := i.(type) {
    case bool:
        fmt.Println("I'm a bool")
    case int:
        fmt.Println("I'm a int")
    default:
        fmt.Printf("Don't Know type %T\n", t)
    }
}
whatAmI(true)   // I'm a bool
whatAmI(1)      // I'm a int
whatAmI("hey")  // Don't Know type string

### Caractéristiques du switch en Go
- PAS DE BREAK nécessaire (pas de fall-through automatique)
- Cases multiples : case a, b, c:
- Conditions dans les cases : case x > 10:
- default : cas par défaut optionnel
- Type switching unique à Go

### interface{} (type vide)
- Peut contenir n'importe quelle valeur
- Utilisé pour les fonctions génériques
- i.(type) : syntaxe pour obtenir le type concret

### Avantages du switch
- Plus lisible que de multiples if/else
- Performance optimisée
- Support natif des types
- Pas de risque d'oubli de break

## 5. BOUCLES ET STRUCTURES DE CONTRÔLE

### Types de boucles for en Go
Go n'a qu'un seul type de boucle : for (remplace while, do-while, etc.)

### 5.1 Boucle for basique (style while)
i := 1
for i <= 3 {
    fmt.Println(i)
    i = i + 1
}
// Sortie: 1, 2, 3

### 5.2 Boucle for style C
for j := 0; j < 3; j++ {
    fmt.Println("range", j)
}
// Structure: for initialisation; condition; post-statement
// Sortie: range 0, range 1, range 2

### 5.3 Boucle for range avec entier (Go 1.22+)
for i := range 3 {
    fmt.Println("range", i)
}
// range 3 génère les valeurs 0, 1, 2
// Plus concis que for i := 0; i < 3; i++

### 5.4 Boucle for range avec tableaux
arr := [3]int{10, 20, 30}

// Avec index et valeur
for i, value := range arr {
    fmt.Printf("arr[%d] = %d\n", i, value)
}

// Avec index seulement
for i := range arr {
    fmt.Printf("Index: %d\n", i)
}

// Avec valeur seulement (utiliser _)
for _, value := range arr {
    fmt.Printf("Valeur: %d\n", value)
}

### 5.5 Boucle for range avec slices
s := []string{"a", "b", "c"}

// Parcours complet
for i, value := range s {
    fmt.Printf("s[%d] = %s\n", i, value)
}

// Index seulement
for i := range s {
    fmt.Println("Index:", i)
}

// Valeur seulement
for _, value := range s {
    fmt.Println("Valeur:", value)
}

### 5.6 Boucle for range avec maps
m := map[string]int{"a": 1, "b": 2, "c": 3}

// Parcours clé-valeur
for clé, valeur := range m {
    fmt.Printf("%s: %d\n", clé, valeur)
}

// Parcours clés seulement
for clé := range m {
    fmt.Printf("Clé: %s\n", clé)
}

// Parcours valeurs seulement (rare)
for _, valeur := range m {
    fmt.Printf("Valeur: %d\n", valeur)
}

### 5.7 Boucle infinie
for {
    fmt.Println("loop")
    break  // Sort de la boucle
}

### 5.8 Mots-clés de contrôle
- break    : Sort complètement de la boucle
- continue : Passe à l'itération suivante

### Exemple avec continue
for n := range 6 {
    if n%2 == 0 {  // Si n est pair
        continue   // Passe à l'itération suivante
    }
    fmt.Println(n) // Affiche seulement les impairs
}
// Sortie: 1, 3, 5

### Opérateur modulo %
- n % 2 : reste de la division de n par 2
- Si reste = 0 → nombre pair
- Si reste = 1 → nombre impair

## 6. FONCTIONS

### 6.1 Fonction main()
- Point d'entrée obligatoire du programme
- Pas de paramètres : func main()
- Pas de valeur de retour
- Le programme commence et se termine avec main()

### 6.2 Déclaration de fonctions
func nomFonction(paramètres) typeRetour {
    // corps de la fonction
    return valeur
}

### 6.3 Fonctions avec paramètres
func add(num1 int, num2 int) int {
    return num1 + num2
}

### Syntaxe courte pour paramètres du même type
func plusadd(num1, num2, num3 int) int {
    return num1 + num2 + num3
}

### 6.4 Fonctions avec retours multiples
func vals() (int, int) {
    return 3, 7
}

### Utilisation des retours multiples
a, b := vals()              // Récupère les deux valeurs
fmt.Println(a)              // 3
fmt.Println(b)              // 7

### Ignorer une valeur avec _
_, c := vals()              // Ignore la première valeur
fmt.Println(c)              // 7

### 6.5 Fonctions variadiques
func sum(nums ...int) {
    total := 0
    for _, num := range nums {
        total += num
    }
    fmt.Println(total)
}

### Appel de fonctions variadiques
sum(1, 2)                   // 2 arguments
sum(1, 2, 3)               // 3 arguments
sum(1, 2, 3, 4, 5)         // 5 arguments

### Expansion d'une slice avec ...
nums := []int{1, 2, 3, 4}
sum(nums...)               // Équivalent à sum(1, 2, 3, 4)

### 6.6 Caractéristiques des fonctions variadiques
- SYNTAXE : func nom(param ...type)
- FLEXIBILITÉ : Nombre variable d'arguments
- CONVERSION : Le paramètre devient une slice []type
- POSITION : Doit être le dernier paramètre
- UNICITÉ : Une seule fonction variadique par fonction

### 6.7 Exemples de fonctions variadiques courantes
fmt.Println("a", "b", "c")           // Affichage multiple
fmt.Printf("%s %s", "hello", "world") // Formatage
append(slice, elem1, elem2, elem3)    // Ajout multiple

### 6.8 Fonctions avec paramètres mixtes
func greet(greeting string, names ...string) {
    for _, name := range names {
        fmt.Printf("%s %s!\n", greeting, name)
    }
}

greet("Hello", "Alice", "Bob")       // Hello Alice! Hello Bob!

### 6.9 Fonctions anonymes
variable := func(paramètres) typeRetour {
    // corps de la fonction
    return valeur
}

### Exemple de fonction avec retour
func Now() time.Time {
    return time.Now()
}

### 6.10 CLOSURES (FERMETURES) EN GO

### Qu'est-ce qu'une closure ?
Une closure est une fonction qui :
- Est définie à l'intérieur d'une autre fonction
- CAPTURE et mémorise les variables de son environnement
- Peut accéder et modifier ces variables même après la fin de la fonction parente

### 6.10.1 Exemple basique de closure

### Générateur de séquence
func intSeq() func() int {
    i := 0                    // Variable capturée
    return func() int {       // Fonction anonyme (closure)
        i++                   // Accède à la variable 'i' capturée
        return i
    }
}

### Utilisation
nextInt := intSeq()           // Crée une closure
fmt.Println(nextInt())        // 1
fmt.Println(nextInt())        // 2
fmt.Println(nextInt())        // 3

### 6.10.2 Indépendance des closures
newInts := intSeq()           // Nouvelle closure indépendante
fmt.Println(newInts())        // 1 (nouvelle variable i)
fmt.Println(newInts())        // 2

### 6.10.3 Closure avec paramètres

### Multiplicateur configuré
func makeMultiplier(factor int) func(int) int {
    return func(x int) int {
        return x * factor     // 'factor' est capturé
    }
}

double := makeMultiplier(2)   // Closure avec factor=2
triple := makeMultiplier(3)   // Closure avec factor=3
fmt.Println(double(5))        // 10
fmt.Println(triple(5))        // 15

### 6.10.4 Accumulateur avec closure
func makeAccumulator() func(int) int {
    sum := 0                  // État persistant
    return func(value int) int {
        sum += value          // Modification de l'état
        return sum
    }
}

acc := makeAccumulator()
fmt.Println(acc(1))           // 1
fmt.Println(acc(2))           // 3
fmt.Println(acc(3))           // 6

### 6.10.5 Concepts clés des closures

### Capture de variables
- La closure "se souvient" des variables de son environnement
- Les variables restent vivantes tant que la closure existe

### État persistant
- Chaque closure maintient son propre état
- Les variables capturées conservent leurs valeurs entre les appels

### Encapsulation
- Les variables capturées ne sont accessibles que via la closure
- Impossible d'accéder directement aux variables depuis l'extérieur

### Indépendance
- Chaque appel à la fonction génératrice crée une nouvelle closure
- Chaque closure a ses propres variables capturées

### 6.10.6 Avantages des closures

### Encapsulation des données
- Données privées et protégées
- Seule la closure peut les modifier

### Alternative aux variables globales
- État persistant sans pollution globale
- Chaque instance maintient son propre état

### Flexibilité et réutilisabilité
- Permet de créer des fonctions spécialisées
- Pattern de programmation fonctionnelle

### Code concis
- Plus simple que les structures avec méthodes
- Interface claire et intuitive

### 6.10.7 Cas d'usage courants

### Générateurs
func makeRange(start, end int) func() (int, bool) {
    current := start
    return func() (int, bool) {
        if current >= end {
            return 0, false
        }
        val := current
        current++
        return val, true
    }
}

### Configuration de fonctions
func makeValidator(minLength int) func(string) bool {
    return func(input string) bool {
        return len(input) >= minLength
    }
}

### Cache/Mémoisation
func memoize(fn func(int) int) func(int) int {
    cache := make(map[int]int)
    return func(x int) int {
        if val, ok := cache[x]; ok {
            return val
        }
        result := fn(x)
        cache[x] = result
        return result
    }
}

### Middleware et wrappers
func timeFunction(fn func()) func() {
    return func() {
        start := time.Now()
        fn()
        fmt.Printf("Durée: %v\n", time.Since(start))
    }
}

### 6.10.8 Bonnes pratiques avec les closures

### Éviter les fuites mémoire
- Attention aux références circulaires
- Libérer les closures non utilisées

### Limiter la portée des captures
- Ne capturer que les variables nécessaires
- Éviter de capturer de gros objets

### Documentation claire
- Documenter le comportement des closures
- Expliquer l'état capturé et son cycle de vie

### Tests appropriés
- Tester l'indépendance des closures
- Vérifier la persistance de l'état

### 6.11 RÉCURSION EN GO

### Qu'est-ce que la récursion ?
La récursion est une technique où une fonction S'APPELLE ELLE-MÊME pour résoudre un problème en le décomposant en sous-problèmes plus petits.

### 6.11.1 Structure d'une fonction récursive

### Éléments obligatoires
func recursive(parameter) returnType {
    // CAS DE BASE (condition d'arrêt)
    if baseCondition {
        return baseValue
    }
    
    // APPEL RÉCURSIF (avec paramètre modifié)
    return operation(recursive(modifiedParameter))
}

### 6.11.2 Exemple : Factorielle

### Implémentation récursive
func fact(n int) int {
    if n == 0 {           // CAS DE BASE
        return 1
    }
    return n * fact(n-1)  // APPEL RÉCURSIF
}

### Exécution étape par étape pour fact(4)
fact(4) → 4 * fact(3)
        → 4 * (3 * fact(2))
        → 4 * (3 * (2 * fact(1)))
        → 4 * (3 * (2 * (1 * fact(0))))
        → 4 * (3 * (2 * (1 * 1)))
        → 4 * (3 * (2 * 1))
        → 4 * (3 * 2)
        → 4 * 6
        → 24

### 6.11.3 Fibonacci avec variables fonctions

### Déclaration de variable fonction
var fib func(n int) int             // Variable de type fonction

### Assignation de fonction anonyme
fib = func(n int) int {
    if n < 2 {
        return n                    // fib(0)=0, fib(1)=1
    }
    return fib(n-1) + fib(n-2)     // Récursion double
}

### Suite de Fibonacci
fib(0) = 0
fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13

### 6.11.4 Types de récursion

### Récursion simple (factorielle)
func fact(n int) int {
    return n * fact(n-1)            // Un seul appel récursif
}

### Récursion double (Fibonacci)
func fib(n int) int {
    return fib(n-1) + fib(n-2)     // Deux appels récursifs
}

### Récursion terminale (optimisée)
func factTail(n, acc int) int {
    if n == 0 {
        return acc
    }
    return factTail(n-1, n*acc)     // Appel terminal
}

### 6.11.5 Fonctions comme valeurs (première classe)

### Déclaration de variable fonction
var operation func(int, int) int

### Assignation de fonction
operation = func(a, b int) int { return a + b }
result := operation(5, 3)           // 8

### Réassignation
operation = func(a, b int) int { return a * b }
result = operation(5, 3)            // 15

### Passage de fonctions en paramètre
func apply(fn func(int) int, value int) int {
    return fn(value)
}

square := func(x int) int { return x * x }
result := apply(square, 5)          // 25

### 6.11.6 Exemples pratiques de récursion

### Puissance
func power(base, exp int) int {
    if exp == 0 {
        return 1
    }
    return base * power(base, exp-1)
}

### Somme des entiers
func sum(n int) int {
    if n <= 0 {
        return 0
    }
    return n + sum(n-1)
}

### Compter les chiffres
func countDigits(n int) int {
    if n < 10 {
        return 1
    }
    return 1 + countDigits(n/10)
}

### Inversion de chaîne
func reverse(s string) string {
    if len(s) <= 1 {
        return s
    }
    return reverse(s[1:]) + string(s[0])
}

### 6.11.7 Récursion vs Itération

### Version récursive (Fibonacci)
func fibRecursive(n int) int {
    if n < 2 { return n }
    return fibRecursive(n-1) + fibRecursive(n-2)
}

### Version itérative (plus efficace)
func fibIterative(n int) int {
    if n < 2 { return n }
    a, b := 0, 1
    for i := 2; i <= n; i++ {
        a, b = b, a+b
    }
    return b
}

### 6.11.8 Optimisation : Mémoisation

### Fibonacci avec cache
func fibMemo() func(int) int {
    cache := make(map[int]int)
    
    var fib func(int) int
    fib = func(n int) int {
        if n < 2 { return n }
        if val, ok := cache[n]; ok {
            return val              // Valeur en cache
        }
        result := fib(n-1) + fib(n-2)
        cache[n] = result           // Mise en cache
        return result
    }
    return fib
}

### Utilisation
fibFunc := fibMemo()
fmt.Println(fibFunc(40))            // Beaucoup plus rapide

### 6.11.9 Problèmes de performance

### Récursion simple : Complexité linéaire
fact(n) : O(n) temps, O(n) espace

### Récursion double : Complexité exponentielle
fib(n) : O(2^n) temps - TRÈS LENT pour n > 30

### Solutions d'optimisation
- Mémoisation : Cache des résultats
- Récursion terminale : Optimisation du compilateur
- Version itérative : Évite la pile d'appels

### 6.11.10 Bonnes pratiques

### Toujours définir un cas de base
func badRecursive(n int) int {
    return n + badRecursive(n-1)    // ❌ Récursion infinie !
}

func goodRecursive(n int) int {
    if n <= 0 { return 0 }          // ✅ Cas de base
    return n + goodRecursive(n-1)
}

### Vérifier la progression
- Chaque appel doit se rapprocher du cas de base
- Éviter les paramètres qui ne changent pas

### Considérer les alternatives
- Récursion pour les problèmes naturellement récursifs
- Itération pour les problèmes simples (performance)
- Mémoisation pour éviter les recalculs

### Limites de la pile
- Go a une pile limitée (~1MB par défaut)
- Récursion profonde peut causer stack overflow
- Utiliser la récursion terminale ou l'itération si nécessaire

### 6.11.11 Avantages et inconvénients

### Avantages de la récursion
- Code élégant et expressif
- Naturelle pour certains problèmes (arbres, fractales)
- Correspond aux définitions mathématiques
- Facilite la preuve de correction

### Inconvénients
- Performance généralement plus lente
- Utilisation importante de mémoire (pile)
- Risque de débordement de pile
- Plus difficile à déboguer

### Quand utiliser la récursion ?
- Problèmes avec structure récursive naturelle
- Algorithmes de parcours d'arbres
- Algorithmes de recherche (backtracking)
- Problèmes mathématiques (combinatoire)
- Quand la lisibilité prime sur la performance

## 7. STRUCTURE D'UN PROGRAMME GO

```go
package main           // Déclaration du package
import "fmt"          // Import des packages nécessaires

func main() {         // Fonction principale
    // Code ici
}
```

## 8. BONNES PRATIQUES

- Utilisez := pour les nouvelles variables dans les fonctions
- Utilisez var pour les variables au niveau package
- Utilisez const pour les valeurs qui ne changent jamais
- Préférez les constantes non typées pour plus de flexibilité
- Groupez les constantes liées avec const ()
- Nommez les constantes en MAJUSCULES pour les exports publics
- Utilisez if avec déclaration courte pour limiter la portée des variables
- Préférez switch à de multiples if/else pour la lisibilité
- Utilisez Type Switch pour gérer différents types
- Utilisez l'opérateur modulo % pour tester la parité et la divisibilité
- Combinez les conditions avec &&, || et !
- Préférez les slices aux arrays pour la flexibilité
- Utilisez make() avec capacité pour optimiser les performances
- Utilisez append() pour ajouter des éléments aux slices
- Utilisez copy() pour copier des slices
- Utilisez slices.Equal() pour comparer des slices (Go 1.21+)
- Utilisez maps pour les associations clé-valeur
- Vérifiez l'existence des clés avec la syntaxe value, ok := map[key]
- Utilisez delete() pour supprimer des éléments de maps
- Utilisez clear() pour vider complètement une map (Go 1.21+)
- Utilisez maps.Equal() pour comparer des maps (Go 1.21+)
- Initialisez les maps avec make() ou des littéraux
- Utilisez for range pour parcourir les collections
- Utilisez _ pour ignorer les valeurs non utilisées dans range
- Pré-allouez la capacité des slices si vous connaissez la taille approximative
- Utilisez le slicing pour créer des sous-ensembles efficacement
- Utilisez continue pour filtrer dans les boucles
- Utilisez break pour sortir des boucles infinies
- Appelez vos fonctions depuis main() pour qu'elles s'exécutent
- fmt.Println() pour l'affichage simple
- fmt.Printf() pour l'affichage formaté
- Commentez votre code avec //

## 9. RESSOURCES D'APPRENTISSAGE

### Officielles
- Tour of Go: https://go.dev/tour/
- Go by Example: https://gobyexample.com/
- Documentation: https://go.dev/doc/

### Avec certificats
- Coursera: "Programming with Google Go Specialization"
- edX: "Introduction to Programming with Go"
- Pluralsight: "Go Path"

### Livres recommandés
- "The Go Programming Language" (Donovan & Kernighan)
- "Go in Action" (Manning)
- "Learning Go" (O'Reilly) 